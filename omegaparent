// Import Libraries
import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
//---------------------------------------------------------------------
// Create HipoReader object and load in file. Create event class and bank instance.
HipoReader reader = new HipoReader();
reader.open("/home/grassla/SimOuts.hipo");
Event 	event = new Event();
Bank  mclund = new Bank(reader.getSchemaFactory().getSchema("MC::Lund"));
//----------------------------------------------------------------------
// Variables.
int omega_parent_count = 0;
int omega_count = 0;
int count = 0;
int i = 0;
int j = 0;
int k = 0;
int pospion = 0;
int negpion = 0;
int pizero = 0;
int omega_parent = 0;
int rho_parent = 0;
int rho_parent_count = 0;
int count0 = 0;
int rho_count = 0;
int rho_parent_pairs = 0;
int rho_parent_pairs_count = 0;
int eventcount = 0;
//----------------------------------------------------------------------
reader.getEvent(event,0);  
List<Integer> pospionList = new ArrayList<>();
List<Integer> negpionList = new ArrayList<>();
List<Integer> pizeroList = new ArrayList<>();
List<Integer> omegaList = new ArrayList<>();
while(reader.hasNext()==true){
      pospionList.clear();
      negpionList.clear();
      pizeroList.clear(); 
      reader.nextEvent(event);
      event.read(mclund);
      if(mclund.getRows()>4){ 
          for(int row = 0; row < mclund.getRows(); row++){
              int pid = mclund.getInt("pid",row);
              count = 0;
              count0 = 0;
              if(pid==223) { 
              count++;
              omega_count = omega_count + count; }
              if(pid==113) {
              count0++;
              rho_count = rho_count + count0; }
              if(pid==211) {
                pospion++;              
                pospionList.add(row); }
              if(pid==-211) {
                negpion++;
                negpionList.add(row); }
              if(pid==111) {
                pizero++;
                pizeroList.add(row); }
            }

            for(i=0; i<pospionList.size(); i++) {
              for(j=0; j<negpionList.size(); j++) {
               for(k=0; k<pizeroList.size(); k++) {
                byte pospionparent = mclund.getByte("parent",pospionList.get(i));
                byte negpionparent = mclund.getByte("parent",negpionList.get(j));
                byte pizeroparent = mclund.getByte("parent",pizeroList.get(k));
                int posparentpid = mclund.getInt("pid",pospionparent-1);
                int negparentpid = mclund.getInt("pid",negpionparent-1);
                int pizeroparentpid = mclund.getInt("pid",pizeroparent-1);

               omega_parent = 0;
               rho_parent = 0;
               rho_parent_pairs = 0;
                if((pospionparent==negpionparent)&&(negpionparent==pizeroparent)&&(pospionparent==pizeroparent)) {
                  if(posparentpid==223) {
                  //omega_parent++; 
                  //omega_parent_count = omega_parent_count + omega_parent; 
                  omega_parent_count++; }
                  if(posparentpid==113) {
                  rho_parent++;
                  rho_parent_count = rho_parent_count + rho_parent;  }
}
     

                if(posparentpid==negparentpid) {
                  if(posparentpid==113) {
                  rho_parent_pairs++; 
                  rho_parent_pairs_count = rho_parent_pairs_count + rho_parent_pairs; }
}
}
} 
}
}
}


System.out.println("Omega total: " + omega_count);
System.out.println("Omega parents: " + omega_parent_count);
System.out.println("Rho total: " + rho_count);
System.out.println("Rho parents: " + rho_parent_count);
System.out.println("Rho parents of pi+pi- pair: " + rho_parent_pairs_count);
//System.out.println("parent reset: " + omega_parent);
//System.out.println("gen reset: " + count);
