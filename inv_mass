// Import Libraries
import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;
import org.jlab.physics.io.DataManager;
//---------------------------------------------------------------------
// Create HipoReader object and load in file. Create event class and bank instance.
HipoReader reader = new HipoReader();
reader.open("/home/grassla/SimOuts.hipo");
Event 	event = new Event();
Bank  gen = new Bank(reader.getSchemaFactory().getSchema("MC::Particle"));
Bank  particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));
//----------------------------------------------------------------------
// Creat TCanvas.
TCanvas W = new TCanvas("W",800,800);
TCanvas Angles = new TCanvas("Angles",800,800);
//----------------------------------------------------------------------
// Create histograms.
H1F  hOmega_Inv = new H1F("hOmega_Inv" ,100, 0.0, 3.0);
hOmega_Inv.setTitleX("Inv Mass [GeV/c^2]");
hOmega_Inv.setTitle("Invariant Mass #omega");
H1F  hPi0_Inv = new H1F("hPi0_Inv" ,100, 0.0, 1.0);
hPi0_Inv.setTitleX("Inv Mass [GeV/c^2]");
hPi0_Inv.setTitle("Invariant Mass #pi 0");
H1F  hOmega_Inv_alternate = new H1F("hOmega_Inv_alternate" ,100, 0.0, 3.0);
hOmega_Inv_alternate.setTitleX("Inv Mass [GeV/c^2]");
hOmega_Inv_alternate.setTitle("Invariant Mass #omega Alternate");
H1F  hPis_Inv = new H1F("hPis_Inv" ,100, 0.0, 2.0);
hPis_Inv.setTitleX("Inv Mass [GeV/c^2]");
hPis_Inv.setTitle("Invariant Mass #pi + #pi -");
H1F  htheta0 = new H1F("htheta0" ,100, 0, 1.0);
htheta0.setTitleX("#Theta [Degrees]");
htheta0.setTitle("Theta 0");
H1F  htheta1 = new H1F("htheta1" ,100, 0, 1.0);
htheta1.setTitleX("#Theta [Degrees]");
htheta1.setTitle("Theta 1");
H2F hPi0vtheta0 = new H2F ("hPi0vtheta0", 100, 0, 1.0, 100, 0, 1.0);
hPi0vtheta0.setTitleX("#pi 0 Inv Mass [GeV/c^2]");
hPi0vtheta0.setTitleY("#theta [Degrees]");
hPi0vtheta0.setTitle("#pi 0 Invariant Mass v #theta (0)");
H2F hPi0vtheta1 = new H2F ("hPi0vtheta1", 100, 0, 1.0, 100, 0, 1.0);
hPi0vtheta1.setTitleX("#pi 0 Inv Mass [GeV/c^2]");
hPi0vtheta1.setTitleY("#theta [Degrees]");
hPi0vtheta1.setTitle("#pi 0 Invariant Mass v #theta (1)");
//----------------------------------------------------------------------
// Variables.
double angle0 = 0;
double angle1 = 0;
//----------------------------------------------------------------------
EventFilter  Omega_filter = new EventFilter("11:22:22:211:-211:X+:X-:Xn");
reader.getEvent(event,0);  
while(reader.hasNext()==true){ 
     reader.nextEvent(event);
     event.read(particles);
     PhysicsEvent physEvent = DataManager.getPhysicsEvent(10.6,particles);
     Particle Omega = physEvent.getParticle("[22,0]+[22,1]+[211]+[-211]");
     LorentzVector vOmega = physEvent.getParticle("[22,0]+[22,1]+[211]+[-211]").vector();
     Particle Piplus = physEvent.getParticle("[211]");
     LorentzVector vPiplus = physEvent.getParticle("[211]").vector();
     Particle Piminus = physEvent.getParticle("[-211]");
     LorentzVector vPiminus = physEvent.getParticle("[-211]").vector();
     Particle Pi0 = physEvent.getParticle("[22,0]+[22,1]");
     LorentzVector vPi0 = physEvent.getParticle("[22,0]+[22,1]").vector();
     Particle Piplusminus = physEvent.getParticle("[-211] + [211]");
     LorentzVector vPiplusminus = physEvent.getParticle("[-211] + [211]").vector();
     Particle gamma_0 = physEvent.getParticle("[22,0]");
     Particle gamma_1 = physEvent.getParticle("[22,1]");
     LorentzVector vgamma_0 = physEvent.getParticle("[22,0]").vector();
     LorentzVector vgamma_1 = physEvent.getParticle("[22,1]").vector();
     Vector3 v3gamma_0 = vgamma_0.vect();
     Vector3 v3gamma_1 = vgamma_1.vect();
     LorentzVector vbeamelectron = physEvent.beamParticle().vector();
     Vector3 v3beamelectron = vbeamelectron.vect();

     if(Omega_filter.isValid(physEvent)==true){
     hPi0_Inv.fill(Pi0.mass()); 
     hPis_Inv.fill(Piplusminus.mass());
     // double angle0 = Math.acos(v3beamelectron.dot(v3gamma_0)/v3beamelectron.mag()*v3gamma_0.mag());
     htheta0.fill(vgamma_0.theta());
     // double angle1 = Math.acos(v3beamelectron.dot(v3gamma_1)/v3beamelectron.mag()*v3gamma_0.mag());
     htheta1.fill(vgamma_1.theta());
     hPi0vtheta0.fill(Pi0.mass(), vgamma_0.theta());
     hPi0vtheta1.fill(Pi0.mass(), vgamma_1.theta());
     if(Pi0.mass()>0.1&&Pi0.mass()<0.2){ //&&Piplusminus.mass()>=.8
     hOmega_Inv.fill(Omega.mass());
     vPi0.add(vPiplus);  
     vPi0.add(vPiminus);
     hOmega_Inv_alternate.fill(vPi0.mass());
}
}
}

//----------------------------------------------------------------------
// Divide TCanvases and draw histograms in them.
W.divide(2,2);
W.cd(0).draw(hPi0_Inv);
W.cd(1).draw(hOmega_Inv);
W.cd(2).draw(hOmega_Inv_alternate);
W.cd(3).draw(hPis_Inv);
Angles.divide(2,2);
Angles.cd(0).draw(htheta0);
Angles.cd(1).draw(htheta1);
Angles.cd(2).draw(hPi0vtheta0);
Angles.cd(3).draw(hPi0vtheta1);
