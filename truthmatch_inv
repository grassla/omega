// Import Libraries
import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
//import org.jlab.clas.physics.EventFilter;
//import org.jlab.physics.io.DataManager;


//@SuppressWarnings("all")

//---------------------------------------------------------------------
// Create HipoReader object and load in file. Create event class and bank instance.
HipoReader reader = new HipoReader();
reader.open("/home/grassla/SimOuts.hipo");
Event 	event = new Event();
Bank  mclund = new Bank(reader.getSchemaFactory().getSchema("MC::Lund"));
Bank recpart = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));
Bank mcpart = new Bank(reader.getSchemaFactory().getSchema("MC::Particle"));
//----------------------------------------------------------------------
// Create Lorentz Vectors.
LorentzVector  vBeam   = new LorentzVector(0.0,0.0,10.6,10.6);
LorentzVector  vTarget = new LorentzVector(0.0,0.0,0.0,0.938);
LorentzVector electron = new LorentzVector();
LorentzVector electron0 = new LorentzVector();
LorentzVector electron1 = new LorentzVector();
//----------------------------------------------------------------------
TCanvas W = new TCanvas("W",800,800);

H1F  hOmega_Inv = new H1F("hOmega_Inv" ,100, 0.0, 3.0);
hOmega_Inv.setTitleX("Inv Mass [GeV/c^2]");
hOmega_Inv.setTitle("Invariant Mass #omega");
H1F  hPi0_Inv = new H1F("hPi0_Inv" ,100, 0.0, 1.0);
hPi0_Inv.setTitleX("Inv Mass [GeV/c^2]");
hPi0_Inv.setTitle("Invariant Mass #pi 0");
H1F  hOmega_Inv_alternate = new H1F("hOmega_Inv_alternate" ,100, 0.0, 3.0);
hOmega_Inv_alternate.setTitleX("Inv Mass [GeV/c^2]");
hOmega_Inv_alternate.setTitle("Invariant Mass #omega Alternate");
H1F  hPis_Inv = new H1F("hPis_Inv" ,100, 0.0, 2.0);
hPis_Inv.setTitleX("Inv Mass [GeV/c^2]");
hPis_Inv.setTitle("Invariant Mass #pi + #pi -");
//----------------------------------------------------------------------
// Variables.
double count = 0;
double theta = 0;
double phi = 0;
double energyy = 0;
double momentum = 0;
double theta1 = 0;
double phi1 = 0;
double energy1 = 0;
double momentum1 = 0;
int thetacount = 0;
int phicount = 0;
int momentumcount = 0;
double counter = 0;
int energycount = 0;
int thetacount1 = 0;
int phicount1 = 0;
int momentumcount1 = 0;
int energycount1 = 0;
double theta11 = 0;
double phi11 = 0;
double momentum11 = 0;
double energy11 = 0;
double thetadiff11 = 0;
double phidiff11 = 0;
double momentumdiff11 = 0;
double energydiff11 = 0;
double counter1 = 0;
//----------------------------------------------------------------------
reader.getEvent(event,0);  
List<Integer> mclundList = new ArrayList<>();
List<Integer> recpartList = new ArrayList<>();
List<Integer> mcpartList = new ArrayList<>();
count = 0;
while(reader.hasNext()==true){
      goodmcpart = false;
      goodmclund = false;
      goodrecpart = false;
      mclundList.clear();
      reader.nextEvent(event);
      event.read(mclund);
      if(mclund.getRows()>4){ 
          for(int row = 0; row < mclund.getRows(); row++){
              int pid = mclund.getInt("pid",row);
              byte type = mclund.getByte("type",row);
              byte parent = mclund.getByte("parent",row);
                  mclundList.add(pid);     

      	if(pid==11&&type==1&&parent==1){
         	electron.setPxPyPzE(
             	  mclund.getFloat("px",row),
              	mclund.getFloat("py",row),
              	mclund.getFloat("pz",row),
              	mclund.getFloat("energy", row) ); 
                theta = electron.theta()*(180/3.1415);
                phi = electron.phi()*(180/3.1415);
                energyy = electron.e();
                momentum = electron.p(); 
                mclund_type = type;
                goodmclund = true;
}
}
}


event.read(mcpart);
mcpartList.clear();
      if(mcpart.getRows()>4){ 
          for(int row = 0; row < mcpart.getRows(); row++){
              int pid = mcpart.getInt("pid",row);
                  mcpartList.add(pid);     
      	if(pid==11){
         	electron1.setPxPyPzM(
             	  mcpart.getFloat("px",row),
              	mcpart.getFloat("py",row),
              	mcpart.getFloat("pz",row),
              	0.0005 ); 
                theta1 = electron1.theta()*(180/3.1415);
                phi1 = electron1.phi()*(180/3.1415);
                energy1 = electron1.e();
                momentum1 = electron1.p(); 
                goodmcpart = true; 
                break; }
}
}
count++;

if(goodmcpart&&goodmclund) {
thetacount1 = 0;
theta11 = (Math.abs(theta) + Math.abs(theta1)) / 2;
thetadiff11 = theta - theta1;
if(Math.abs(thetadiff11)<=.05*Math.abs(theta11)){
thetacount1++; }
phicount1 = 0;
phi11 = (Math.abs(phi) + Math.abs(phi1)) / 2;
phidiff11 = phi - phi1;
if(Math.abs(phidiff11)<=.05*Math.abs(phi11)){
phicount1++; }
energycount1 = 0;
energy11 = (energyy + energy1) / 2;
energydiff11 = energyy - energy1;
if(Math.abs(energydiff11)<=.05*Math.abs(energy11)){
energycount1++; }
momentumcount1 = 0;
momentum11 = (momentum + momentum1) / 2;
momentumdiff11 = momentum - momentum1;
if(Math.abs(momentumdiff11)<=.05*Math.abs(momentum11)){
momentumcount1++; }

if(thetacount1>=1&&phicount1>=1&&energycount1>=1&&momentumcount1>=1) {
counter1++; 

//Create inv mass using mcpart bank
}

}
